
class Solution {
    bool canMove(int row,int col, vector<string> board, int n)
    {
        int r=row;
        int c=col;
        while(row>=0 && col>=0)
        {
            if(board[row][col]=='Q') return false;
            row--;
            col--;
        }
        row=r;
        col=c;
        while(col>=0)
        {
            if(board[row][col]=='Q') return false;
            col--; 
        }
        row=r;
        col=c;
        while(row<n && col>=0 )
        {
            if(board[row][col]=='Q') return false;
             
            row++;
            col--;
        }
        return true;
        
    }
    void func(int col, vector<string> &board, int n, vector<vector<string>> &ans)
    {
       if(col==n)
       {
           ans.push_back(board);
           return;

       }
        for(int row=0;row<n;row++)
        {
            if(canMove(row,col, board,n))
            {
                board[row][col]='Q';
                func(col+1,board,n,ans);
                board[row][col]='.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        func(0,board,n,ans);
        return ans;
    }
};
