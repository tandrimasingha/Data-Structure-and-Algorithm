Find Subsequence of Length K With the Largest Sum..Easy


class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        //min heap->to pull out the smallest element
       PriorityQueue<int[]> q=new PriorityQueue<>((a,b)->(a[0]-b[0]));
       for(int i=0;i<nums.length;i++)
       {
           q.add(new int[]{nums[i],i});
           if(q.size()>k)
           {
               q.poll();
           }
       }
        Set<Integer> set=new HashSet<>();
       while(!q.isEmpty())
       {
            int top[]=q.poll();
            set.add(top[1]);
          
       }
        int arr[]=new int[k];
        int j=0;
        for(int i=0;i<nums.length;i++)
        {
            if(set.contains(i))
            {
                arr[j++]=nums[i];
            }
        }
        return arr;
    }
}
